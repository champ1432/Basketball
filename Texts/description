--Game Description--

1. Create 2 teams                     ==========
2. Create players for those teams     ==========
3. Sim a game between the teams       ==========
4. Live sim a game between the teams  ==========
5. Create multiple teams and players  ===========
6. Sim multiple games between all teams =========


def commentary():
    print("Welcome to {}, where the visiting {} {} will square off against the {}.".format(home[0][1], away[0][1],
                                                                                           away[0][2], home[0][2]))
    print("Starting Lineups for the {}: \n {} {} \n {} {} \n {} {} \n {} {} \n {} {} \n".format(home[0][2],
                                                                                                home_point_guard[0][0],
                                                                                                home_point_guard[0][1],
                                                                                                home_shooting_guard[0][
                                                                                                    0],
                                                                                                home_shooting_guard[0][
                                                                                                    1],
                                                                                                home_small_forward[0][
                                                                                                    0],
                                                                                                home_small_forward[0][
                                                                                                    1],
                                                                                                home_power_forward[0][
                                                                                                    0],
                                                                                                home_power_forward[0][
                                                                                                    1],
                                                                                                home_center[0][1],
                                                                                                home_center[0][1]))
    print("Starting Lineups for the {}: \n {} {} \n {} {} \n {} {} \n {} {} \n {} {} \n".format(away[0][2],
                                                                                                away_point_guard[0][0],
                                                                                                away_point_guard[0][1],
                                                                                                away_shooting_guard[0][
                                                                                                    0],
                                                                                                away_shooting_guard[0][
                                                                                                    1],
                                                                                                away_small_forward[0][
                                                                                                    0],
                                                                                                away_small_forward[0][
                                                                                                    1],
                                                                                                away_power_forward[0][
                                                                                                    0],
                                                                                                away_power_forward[0][
                                                                                                    1],
                                                                                                away_center[0][1],
                                                                                                away_center[0][1]))

def commentary():
    print("Welcome to {}, where the visiting {} {} will square off against the {}.".format(home[0][1], away[0][1],
                                                                                           away[0][2], home[0][2]))
    print(
        "Starting Lineups for the {}:".format(home[0][2]) + "                " + "Starting Lineups for the {}: \n {} {}".format(away[0][2], home_point_guard[0][0],home_point_guard[0][1]) + "                " + "{} {} \n {} {}".format(away_point_guard[0][0], away_point_guard[0][1], home_shooting_guard[0][0], home_shooting_guard[0][1]) + "              ""{} {} \n {} {}".format(away_shooting_guard[0][0], away_shooting_guard[0][1], home_small_forward[0][0], home_small_forward[0][1]) + "               ""{} {} \n {} {}".format(away_small_forward[0][0], away_small_forward[0][1], home_power_forward[0][0],home_power_forward[0][1]) + "              ""{} {} \n {} {}".format(away_power_forward[0][0], away_power_forward[0][1], home_center[0][0], home_center[0][1]) + "               ""{} {} \n".format(
            away_center[0][0],
            away_center[0][1]))




def sim():
    global quarter_clock, home_score, away_score
    ty_res = time.gmtime(quarter_clock)
    time_amount = time.strftime("%M:%S", ty_res)
    time_runoff = random.randrange(10, 24)
    shot_success = random.randint(0, 1)
    if pos == home_team:
        shooter = random.choice(home_players_on_court)
        if shot_success == 0:
            print("\n{} {} misses it.".format(shooter[0][0], shooter[0][1]))
            if quarter_clock > 0:
                quarter_clock = quarter_clock - time_runoff
                print("{}: {} - {}: {}    \n{} remaining".format(home[0][2], home_score, away[0][2], away_score, time_amount))
        elif shot_success == 1:
            print("\n{} {} makes it.".format(shooter[0][0], shooter[0][1]))
            home_score = home_score + 2
            if quarter_clock > 0:
                quarter_clock = quarter_clock - time_runoff
                print("{}: {} - {}: {}    \n{} remaining".format(home[0][2], home_score, away[0][2], away_score, time_amount))
    elif pos == away_team:
        shooter = random.choice(away_players_on_court)
        if shot_success == 0:
            print("\n{} {} misses it.".format(shooter[0][0], shooter[0][1]))
            if quarter_clock > 0:
                quarter_clock = quarter_clock - time_runoff
                print("{}: {} - {}: {}    \n{} remaining".format(home[0][2], home_score, away[0][2], away_score, time_amount))
        elif shot_success == 1:
            print("\n{} {} makes it.".format(shooter[0][0], shooter[0][1]))
            away_score = away_score + 2
            if quarter_clock > 0:
                quarter_clock = quarter_clock - time_runoff
                print("{}: {} - {}: {}    \n{} remaining".format(home[0][2], home_score, away[0][2], away_score, time_amount))